[db.X { "x" : "Str" }]
[db.Insensitive { "cOlUmNnAmE" : "Str" }]
[db.XY { "x" : "Str", "y": "Str" }]
[db.SortedX { "x" : "Str", "sortBy": "Int" }]
[db.Timestamp { "ts" : "Date"}]
[db.Uuid { "uu" : "UUID"}]
[db.Passwords { "password" : "Password"}]

// ------------
// Roundtripping Functions
// ------------
[test.dbnullroundtrip] with DB X
(let _ = DB.set_v1 { x = null } "hello" X in
 DB.get_v1_ster "hello" X) = { x = null }

[test.db case insensitive roundtrip] with DB Insensitive
(let _ = DB.set_v1 { cOlUmNnAmE = "some value" } "hello" Insensitive in
 DB.get_v1_ster "hello" Insensitive) = { cOlUmNnAmE = "some value" }

[test.db roundtrip password] with DB Passwords
// Each call to hash gets a different but compatible answer
(let pw = Password.hash_v0 "password" in
 let x = DB.set_v1 { password = pw } "test" Passwords in
 let y = DB.queryOneWithExactFields_v0_ster { password = pw } Passwords in
 Password.check_v0 y.password "password") = true

[test.db roundtrip uuid] with DB Uuid
(let i = Uuid.generate_v0 in
 let _ = DB.set_v1 { uu = i } "test" Uuid in
 (List.head_v0 (DB.getAll_v2 Uuid)).uu = i) = true


// ------------
// Errors
// ------------
[test.db object to missing column gives good error] with DB X
(DB.set_v1 { x = "x"; col = "v" } "i" X) = Test.typeError_v0 "Found but did not expect: [col]"



// ------------
// Exact field queries
// ------------
[test.query_v1_works] with DB XY
(let dontfind = DB.set_v1 {x = "foo"; y = "bar" } "hello" XY in
 let hopetofind = DB.set_v1 { x = "bar"; y = "foo" } "findme" XY  in
 DB.query_v1 { x = "bar" } XY) = [["findme"; { x = "bar"; y = "foo" }]]

[test.query_v2_works] with DB XY
(let dontfind = DB.set_v1 {x = "foo"; y = "bar" } "hello" XY in
 let hopetofind = DB.set_v1 { x = "bar"; y = "foo" } "findme" XY in
 DB.query_v2 { x = "bar" } XY) = [{ x = "bar"; y = "foo" }]

[test.query_v3_works] with DB XY
(let dontfind = DB.set_v1 {x = "foo"; y = "bar" } "hello" XY in
 let hopetofind = DB.set_v1 { x = "bar"; y = "foo" } "findme" XY in
 DB.query_v3 { x = "bar" } XY) = [{ x = "bar"; y = "foo" }]


// DB.set
[test.db set does upsert] with DB X
(let old = DB.set_v1 { x = "foo" } "hello" X in
 let newval = DB.set_v1 { x = "bar" } "hello" X in
 DB.getAllWithKeys_v1 X) = [["hello"; { x = "bar"}]]


// DB.get
[test.db get returns nothing] with DB X
( DB.get_v1 "lol" X) = Nothing


// DB.getAll
[test.db.getAll_v1 works] with DB SortedX
(let one = DB.set_v1 { x = "foo"; sortBy = 0 } "one" SortedX in
 let two = DB.set_v1 { x = "bar"; sortBy = 1  } "two" SortedX in
 let three = DB.set_v1 { x = "baz"; sortBy = 2  } "three" SortedX in
 (DB.getAll_v1 SortedX)
 |> List.sortBy_v0 (fun x -> (List.last_v0 x).sortBy)) = (
   [ ["one" ; { x = "foo"; sortBy = 0}]
   ; ["two" ; { x = "bar"; sortBy = 1}]
   ; ["three"; { x = "baz"; sortBy = 2}]])

[test.db.getAll_v2 works] with DB SortedX
(let one = DB.set_v1 { x = "foo"; sortBy = 0 } "one" SortedX in
 let two = DB.set_v1 { x = "bar"; sortBy = 1  } "two" SortedX in
 let three = DB.set_v1 { x = "baz"; sortBy = 2  } "three" SortedX in
 (DB.getAll_v2 SortedX)
 |> List.sortBy_v0 (fun x -> x.sortBy)) = (
   [ { x = "foo"; sortBy = 0}
   ; { x = "bar"; sortBy = 1}
   ; { x = "baz"; sortBy = 2}])

[test.db.getAll_v3 works] with DB SortedX
(let one = DB.set_v1 { x = "foo"; sortBy = 0 } "one" SortedX in
 let two = DB.set_v1 { x = "bar"; sortBy = 1  } "two" SortedX in
 let three = DB.set_v1 { x = "baz"; sortBy = 2  } "three" SortedX in
 (DB.getAll_v3 SortedX)
 |> List.sortBy_v0 (fun x -> x.sortBy)) = (
   [ { x = "foo"; sortBy = 0}
   ; { x = "bar"; sortBy = 1}
   ; { x = "baz"; sortBy = 2}])


// DB.getAllKeys
[test.db.keys_v1 works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 (DB.keys_v1 X) |> List.sort_v0) = (
   [ "one"; "two" ])


// DB.getAllWithKeys
[test.db.getAllWithKeys_v1 works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 DB.getAllWithKeys_v1 X) = [["one"; { x = "foo" }];["two"; {x = "bar"}]]

[test.db.getAllWithKeys_v2 works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 DB.getAllWithKeys_v2 X) = { one = { x = "foo"} ; two = { x = "bar"} }


// DB.getManyWithKeys
[test.db.getManyWithKeys works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 (DB.getManyWithKeys_v0 ["one"; "two"] X)) |> List.sortBy (fun v -> List.head_v0_ster v) = [["one"; { x = "foo" }];["two"; { x = "bar" }]]

[test.db.getManyWithKeys_v1 works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 DB.getManyWithKeys_v1 ["one"; "two"] X) = { one = { x = "foo"} ; two = { x = "bar"} }


// DB.getExisting
[test.db.getExisting_v0 works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 DB.getExisting_v0 ["three"; "two"] X) = [ { x = "bar" } ]


// DB.getMany
[test.db.getMany_v1 works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 (DB.getMany_v1 ["one"; "two"] X) |> List.sortBy (fun v -> List.head_v0_ster v)) = [["one"; { x = "foo" }];["two"; { x = "bar" }]]

[test.db.getMany_v2 works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 (DB.getMany_v2 ["one"; "two"] X) |> List.sortBy (fun v -> v.x)) = [ { x = "bar"}; { x = "foo"}]

[test.db.getMany_v3 returns nothing] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 DB.getMany_v3 ["three"; "two"] X) = Nothing

[test.db.getMany_v3 works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 DB.getMany_v3 ["one"; "two"] X) = Just [ { x = "foo"}; { x = "bar"}]


// DB.queryWithKey
[test.db.queryWithKey_v1 works] with DB SortedX
(let one = DB.set_v1 { x = "foo"; sortBy = 0 } "one" SortedX in
 let two = DB.set_v1 { x = "bar"; sortBy = 1  } "two" SortedX in
 let three = DB.set_v1 { x = "bar"; sortBy = 2  } "three" SortedX in
 (DB.queryWithKey_v1 { x = "bar" } SortedX)
 |> List.sortBy_v0 (fun x -> (List.last_v0 x).sortBy)) = [ ["two" ; { x = "bar"; sortBy = 1}]; ["three"; { x = "bar"; sortBy = 2}]]

[test.db.queryWithKey_v2 works] with DB SortedX
(let one = DB.set_v1 { x = "foo"; sortBy = 0 } "one" SortedX in
 let two = DB.set_v1 { x = "bar"; sortBy = 1  } "two" SortedX in
 let three = DB.set_v1 { x = "bar"; sortBy = 2  } "three" SortedX in
 DB.queryWithKey_v2 { x = "bar" } SortedX) = { two = { x = "bar"; sortBy = 1}; three = { x = "bar"; sortBy = 2} }


// DB.queryOne
[test.db.queryOne_v1 works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 DB.queryOne_v1 { x = "foo" } X) = Just { x = "foo" }

[test.db.queryOne_v1 returns nothing if none] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 DB.queryOne_v1 { x = "bar" } X) = Nothing

[test.db.queryOne_v1 returns nothing if many] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "foo" } "two" X in
 DB.queryOne_v1 { x = "foo" } X) = Nothing


// DB.queryOneWithKey
[test.db.queryOneWithKey_v1 works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 DB.queryOneWithKey_v1 { x = "foo" } X) = Just [ "one"; { x = "foo" }]

[test.db.queryOneWithKey_v1 returns none on empty] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 DB.queryOneWithKey_v1 { x = "foo" } X) = Just [ "one"; { x = "foo" }]

[test.db.queryOneWithKey_v1 returns none if many] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "foo" } "two" X in
 DB.queryOneWithKey_v1 { x = "foo" } X) = Nothing

[test.db.queryOneWithKey_v2 works] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 DB.queryOneWithKey_v2 { x = "bar" } X) = Nothing

[test.db.queryOneWithKey_v2 returns none if none] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 DB.queryOneWithKey_v2 { x = "bar" } X) = Nothing

[test.db.queryOneWithKey_v2 returns none if many] with DB X
(let one = DB.set_v1 { x = "foo" } "one" X in
 let two = DB.set_v1 { x = "foo" } "two" X in
 DB.queryOneWithKey_v2 { x = "foo" } X) = Nothing

// DB.delete
[test.db.delete_v1 does delete] with DB X
(let one = DB.set_v1 { x = "foo"} "one" X in
 let delete = DB.delete_v1 "one" X in
 DB.getAllWithKeys_v1 X) = []

[test.db.delete_v1 deletes nothing] with DB X
(let one = DB.set_v1 { x = "foo"} "one" X in
 let delete = DB.delete_v1 "two" X in
 DB.getAllWithKeys_v1 X) = [["one"; { x = "foo"}]]

[test.db.delete_v1 deletes only one] with DB X
(let one = DB.set_v1 { x = "foo"} "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 let delete = DB.delete_v1 "one" X in
 DB.getAllWithKeys_v1 X) = [["two"; { x = "bar"}]]

// // DB.deleteAll
[test.db.deleteAll_v1 works] with DB X
(let one = DB.set_v1 { x = "foo"} "one" X in
 let delete = DB.deleteAll_v1 X in
 DB.getAll_v1 X) = []

[test.db.deleteAll_v1 delete all] with DB X
(let one = DB.set_v1 { x = "foo"} "one" X in
 let two = DB.set_v1 { x = "bar" } "two" X in
 let delete = DB.deleteAll_v1 X in
 DB.getAll_v1 X) = []

[test.db.deleteAll_v1 works] with DB X
(let delete = DB.deleteAll_v1 X in
 DB.getAll_v1 X) = []

// ------------
// SqlCompiler queries
// ------------
[db.Person { "name" : "Str", "human": "Bool", "height": "Int", "income" : "Float", "dob" : "Date"}]

[fn.addFriend key name height human dob income]
(let dob = Date.parse_v2_ster dob in
 let obj = { height = height; name = name; human = human; dob = dob; income = income } in
 DB.set_v1 obj key Person)

[fn.prepFriends v]
(let _ = addFriend "ross" "Ross" 73 true "1967-05-12T00:00:00Z" 100.0 in
 let _ = addFriend "rachel" "Rachel" 65 true "1969-05-05T00:00:00Z" 82.0 in
 // Note spaces around Chandler, that's to test trim functions
 let _ = addFriend "chandler" " Chandler " 72 true "1969-08-19T10:13:42Z" 83.0 in
 let _ = addFriend "cat" "GrumpyCat" 10 false "2012-04-04T00:00:00Z"  0.0 in
 DB.set_v1 { height = null; name = null; human = null; dob = null; income = null } "null" Person)

[fn.d datestr]
(Date.parse_v1_ster datestr)
[fn.rossDOB x]
(Date.parse_v1_ster  "1967-05-12T00:00:00Z")

[fn.friends lambda]
(let _ = prepFriends null in
 ((DB.query_v4 Person lambda)
 |> List.map_v0 (fun p -> p.name)
 |> List.sort_v0))

// Test standard language features
[test.db findall] with DB Person
(friends (fun p -> true)) = [null; " Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]

[test.db find all with condition] with DB Person
(friends (fun p -> p.height > 3)) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]

[test.db boolean queries] with DB Person
(friends (fun p -> p.human)) = [" Chandler "; "Rachel"; "Ross" ]

[test.db null equality works] with DB Person
(friends (fun p -> p.name = null )) = [null]

[test.db null inequality works] with DB Person
(friends (fun p -> p.name != null )) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]

// TODO weird behaviour here - shouldn't the null object be returned here.
[test.db null is not 'null' (string)] with DB Person
(friends (fun p -> p.name != "null" )) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]

[test.db different param name] with DB Person
(friends (fun value -> value.human )) = [" Chandler "; "Rachel"; "Ross" ]

[test.db && queries] with DB Person
(friends (fun p -> p.human && p.height > 66 )) = [" Chandler "; "Ross" ]

[test.db inlining] with DB Person
(friends (fun p -> let x = 32 in p.height > x && true)) = [" Chandler "; "Rachel"; "Ross" ]

[test.db inlining field access] with DB Person
(friends (fun p -> let x = p.height in true && x > 32 )) = [" Chandler "; "Rachel"; "Ross" ]

[test.db pipes] with DB Person
(friends (fun p -> p.height |> (*) 2 |> (<) 40)) = ["GrumpyCat" ]

//[test.db query with external variable] with DB Person
// TODO pass an external var x
//(friends (fun p -> p.height < x)) = ["GrumpyCat"]

[test.db fieldaccess] with DB Person
(friends (fun p -> let obj = { x = 42 } in p.height > obj.x )) =
  [" Chandler "; "Rachel"; "Ross" ]

[test.db nested fieldaccess] with DB Person
(friends (fun p -> let obj = { field1 = { field2 = 42 } } in p.height > obj.field1.field2 )) =
  [" Chandler "; "Rachel"; "Ross" ]

[test.db lambda doesnt return a bool] with DB Person
(friends (fun p -> "x")) =
  Test.typeError_v0 "Fn called with an error as an argument"

[test.db bad variable name] with DB Person
(friends (fun p -> let x = 32 in true && p.height > y)) =
  Test.typeError_v0 "Fn called with an error as an argument"

[test.db sql injection] with DB Person
(friends (fun p -> "; select * from users;" = p.name )) = []

// ------------
// Test compiled functions
// ------------
[tests.db compiled functions] with DB Person
(friends (fun p -> Float.lessThan_v0 90.0 p.income)) = [ "Ross" ]
(friends (fun p -> Float.lessThanOrEqualTo_v0 p.income 82.10)) = ["GrumpyCat"; "Rachel"]
(friends (fun p -> Float.greaterThan_v0 p.income 90.0)) = [ "Ross" ]
(friends (fun p -> Float.greaterThanOrEqualTo_v0 82.10 p.income )) = ["GrumpyCat"; "Rachel"]
(friends (fun p -> Int.lessThanOrEqualTo_v0 p.height 65)) = ["GrumpyCat"; "Rachel"]
(friends (fun p -> Int.lessThan_v0 p.height 65)) = ["GrumpyCat"]
(friends (fun p -> Int.greaterThanOrEqualTo_v0 p.height 65)) =  [" Chandler "; "Rachel"; "Ross" ]
(friends (fun p -> Int.greaterThan_v0 p.height 65)) =  [" Chandler "; "Ross" ]
(friends (fun p -> String.toLowercase_v0 p.name = "rachel")) = ["Rachel"]
(friends (fun p -> String.toLowercase_v1 p.name = "rachel")) = ["Rachel"]
(friends (fun p -> String.toUppercase_v0 p.name = "RACHEL")) = ["Rachel"]
(friends (fun p -> String.toUppercase_v1 p.name = "RACHEL")) = ["Rachel"]
(friends (fun p -> String.reverse_v0 p.name = "lehcaR")) = ["Rachel"]
(friends (fun p -> String.length_v0 p.name > 5)) = [" Chandler "; "GrumpyCat"; "Rachel" ]
(friends (fun p -> String.isSubstring_v1 p.name "ROSS")) = []
(friends (fun p -> String.isSubstring_v1 p.name "R")) = ["Rachel"; "Ross" ]
(friends (fun p -> String.isSubstring_v1 p.name "ZZZ")) = []
(friends (fun p -> String.isSubstring_v1 p.name "")) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]
(friends (fun p -> String.contains_v0 p.name "ROSS")) = []
(friends (fun p -> String.contains_v0 p.name "R")) = ["Rachel"; "Ross" ]
(friends (fun p -> String.contains_v0 p.name "ZZZ")) = []
(friends (fun p -> String.contains_v0 p.name "")) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]
(friends (fun p -> String.replaceAll_v0 p.name "handle" "he" == " Cher ")) = [" Chandler " ]
(friends (fun p -> String.replaceAll_v0 p.name " " "Xx" == "XxChandlerXx")) = [" Chandler " ]
(friends (fun p -> String.replaceAll_v0 p.name "xxx" "notUsed" == " Chandler ")) = [" Chandler " ]
(friends (fun p -> String.trim_v0 p.name == "Chandler")) = [" Chandler " ]
(friends (fun p -> String.trimStart_v0 p.name == "Chandler ")) = [" Chandler " ]
(friends (fun p -> String.trimEnd_v0 p.name == " Chandler")) = [" Chandler " ]
(friends (fun p -> Bool.not_v0 p.human)) = ["GrumpyCat" ]
(friends (fun p -> Date.(<=) p.dob (d "2000-01-01T01:02:03Z"))) = [" Chandler "; "Rachel"; "Ross" ]
(friends (fun p -> Date.(<=) p.dob (rossDOB null))) = ["Ross" ]
(friends (fun p -> Date.(<) p.dob (rossDOB null))) = []
(friends (fun p -> Date.(>=) p.dob (d "2000-01-01T01:02:03Z"))) = ["GrumpyCat"]
(friends (fun p -> Date.(>=) p.dob (rossDOB null))) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross" ]
(friends (fun p -> Date.(>) p.dob (rossDOB null))) = [" Chandler "; "GrumpyCat"; "Rachel" ]
(friends (fun p -> Date.(<=) p.dob (Date.add_v0 (Date.now_v0) 1 ))) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross"]
(friends (fun p -> Date.(<=) p.dob (Date.subtract_v0 (Date.now_v0) 1 ))) = [" Chandler "; "GrumpyCat"; "Rachel"; "Ross"]
(friends (fun p -> Date.atStartOfDay_v0 p.dob == (d "1969-08-19T00:00:00Z"))) = [" Chandler "]
(friends (fun p -> Date.hour_v1 p.dob == 10)) = [" Chandler "]
(friends (fun p -> Date.day_v0 p.dob == 19)) = [" Chandler "]
(friends (fun p -> Date.minute_v0 p.dob == 13)) = [" Chandler "]
(friends (fun p -> Date.month_v0 p.dob == 8)) = [" Chandler "]
(friends (fun p -> Date.second_v0 p.dob == 42)) = [" Chandler "]
(friends (fun p -> Date.year_v0 p.dob == 1969)) = [" Chandler "; "Rachel" ]

[test.db partial evaluation fieldAccesses outside query] with DB Person
(let _ = prepFriends null
 let x = { y = { z = { a = 5 }}}
 ((DB.query_v4 Person (fun p -> x.y.z.a < (String.length_v0 p.name)))
 |> List.map_v0 (fun p -> p.name)
 |> List.sort_v0)) = [" Chandler "; "GrumpyCat"; "Rachel"]

[test.db partial evaluation fieldAccesses inside query] with DB Person
(friends (fun p -> let x = { y = { z = { a = 5 }}} in x.y.z.a < (String.length_v0 p.name))) = [" Chandler "; "GrumpyCat"; "Rachel"]

[test.db partial evaluation fieldAccesses inside query] with DB Person
(friends (fun p -> let x = { y = { z = { a = [1;2;3;4;5] }}} in (x.y.z.a |> List.length_v0) < (String.length_v0 p.name))) = [" Chandler "; "GrumpyCat"; "Rachel"]


// ------------
// Other query functions
// ------------
// queryOne
[test.queryOne works - multiple] with DB Person
(let _ = prepFriends null in
 DB.queryOne_v4 Person (fun p -> p.human)) = Nothing

[test.queryOne works - none] with DB Person
(let _ = prepFriends null in
 DB.queryOne_v4 Person (fun p -> p.name = "bob")) = Nothing

[test.queryOne works - one] with DB Person
(let _ = prepFriends null in
 (DB.queryOne_v4 Person (fun p -> p.name = "Rachel"))
 |> Option.map_v0 (fun v -> v.name)) = Just "Rachel"

// queryOneWithKey
[test.queryOneWithKey works - multiple] with DB Person
(let _ = prepFriends null in
 DB.queryOneWithKey_v3 Person (fun p -> p.human)) = Nothing

[test.queryOneWith works - none] with DB Person
(let _ = prepFriends null in
 DB.queryOneWithKey_v3 Person (fun p -> p.name = "bob")) = Nothing

[test.queryOne works - one] with DB Person
(let _ = prepFriends null in
 (DB.queryOneWithKey_v3 Person (fun p -> p.name = "Rachel"))
 |> Option.map_v0 (fun v -> v.rachel.name)) = Just "Rachel"

// queryWithKey
[test.queryWithKey works - none] with DB Person
(let _ = prepFriends null in
 DB.queryWithKey_v3 Person (fun p -> p.name = "bob")) = {}

[test.queryWithKey works - one] with DB Person
(let _ = prepFriends null in
 (DB.queryWithKey_v3 Person (fun p -> p.name = "Rachel"))
 |> (fun v -> v.rachel.name)) = "Rachel"

// queryCount
[test.queryCount works - none] with DB Person
(let _ = prepFriends null in
 DB.queryCount_v0 Person (fun p -> p.name = "bob")) = 0

[test.queryCount works - one] with DB Person
(let _ = prepFriends null in
 DB.queryCount_v0 Person (fun p -> p.height > 3)) = 4

// ------------
// Date Functions
// ------------

[fn.beforeDate null]
Date.parse_v2_ster "1900-01-01T00:00:00Z"
[fn.middleDate null]
Date.parse_v2_ster "2000-01-01T00:00:00Z"
[fn.afterDate null]
Date.parse_v2_ster "2100-01-01T00:00:00Z"

[fn.prepDates null]
(let _ = DB.set_v1 { ts = beforeDate null } "before" Timestamp in
 let _ = DB.set_v1 { ts = middleDate null } "middle" Timestamp in
 DB.set_v1 { ts = afterDate null } "after"  Timestamp)

[test.query with Date::<] with DB Timestamp
(let _ = prepDates null in
 DB.queryOne_v4 Timestamp (fun value -> Date.(<) (middleDate null) value.ts)) =
   Just { ts = afterDate null }

[test.query with Date::>] with DB Timestamp
(let _ = prepDates null in
 DB.queryOne_v4 Timestamp (fun value -> Date.(>) (middleDate null) value.ts)) =
   Just { ts = beforeDate null }

[test.query with Date::lessThan] with DB Timestamp
(let _ = prepDates null in
 DB.queryOne_v4 Timestamp (fun value -> Date.lessThan_v0 (middleDate null) value.ts)) =
   Just ({ ts = afterDate null })

[test.query with Date::greaterThan] with DB Timestamp
(let _ = prepDates null in
 DB.queryOne_v4 Timestamp (fun value -> Date.greaterThan_v0 (middleDate null) value.ts)) =
   Just { ts = beforeDate null }

[tests.other tests]
(DB.generateKey_v0 |> String.length_v1) = 36
